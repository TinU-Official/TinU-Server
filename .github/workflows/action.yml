name: TinU Backend CI/CD

on:
  push:
  pull_request:
    branches:
      - develop

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    steps:
      # Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout-source code
        uses: actions/checkout@v3

      # application.properties 생성
      - name: create application.properties
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application.properties
          spring.datasource.driver-class-name=${{ secrets.DRIVER_CLASS_NAME }}
          spring.datasource.url=${{ secrets.DATASOURCE_URL }}
          spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }}
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
          spring.jackson.time-zone=Asia/Seoul
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
          management.server.port=${{ secrets.SPRING_ACTUATOR_PORT }}
          management.endpoints.web.exposure.include=${{ secrets.ENABLE_ACTUATOR_ENDPOINTS }}
          management.endpoints.web.base-path=${{ secrets.ACTUATOR_BASE_PATH }}
          EOF

    # docker image 빌드
      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

      # docker hub 로그인
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # docker hub 퍼블리시
      - name: Publish to docker hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

      # AWS Instance 접속 & Application 실행
      - name: Connect to AWS & Execute Application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: ${{ secrets.AWS_SSH_PORT }}
          script: |
            cd app/
            docker-compose down
            docker-compose pull ${{ secrets.DOCKERHUB_IMAGENAME }}
            docker-compose up --build -d
